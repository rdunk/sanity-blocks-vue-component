{"version":3,"sources":["../src/serializers.js"],"names":["require","getImageUrl","objectAssign","module","exports","BlockSerializer","props","node","serializers","options","isInline","children","blockType","_type","serializer","types","Error","h","SpanSerializer","mark","isPlain","markType","marks","console","warn","markFallback","ListSerializer","tag","type","ListItemSerializer","style","block","BlockTypeSerializer","test","RawMarkSerializer","UnderlineSerializer","textDecoration","StrikeThroughSerializer","LinkSerializer","attrs","href","ImageSerializer","img","src","serializeSpan","span","index","hardBreak","key","text","map","child","i","serializeNode","serializedNode","_key","HardBreakSerializer","defaultMarkSerializers","strong","bind","em","code","underline","link","ContainerSerializer","properties","containerClass","className","class","defaultSerializers","image","list","listItem","container","undefined","empty"],"mappings":"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","file":"serializers.js","sourcesContent":["const {getImageUrl} = require('@sanity/block-content-to-hyperscript/internals')\nconst objectAssign = require('object-assign')\n\nmodule.exports = h => {\n  // Low-level block serializer\n  function BlockSerializer(props) {\n    const {node, serializers, options, isInline, children} = props\n    const blockType = node._type\n    const serializer = serializers.types[blockType]\n    if (!serializer) {\n      throw new Error(\n        `Unknown block type \"${blockType}\", please specify a serializer for it in the \\`serializers.types\\` prop`\n      )\n    }\n\n    return h(\n      serializer,\n      {\n        node,\n        options,\n        isInline\n      },\n      children\n    )\n  }\n\n  // Low-level span serializer\n  function SpanSerializer(props) {\n    const {mark, children} = props.node\n    const isPlain = typeof mark === 'string'\n    const markType = isPlain ? mark : mark._type\n    const serializer = props.serializers.marks[markType]\n    if (!serializer) {\n      // @todo Revert back to throwing errors?\n      // eslint-disable-next-line no-console\n      console.warn(\n        `Unknown mark type \"${markType}\", please specify a serializer for it in the \\`serializers.marks\\` prop`\n      )\n      return h(props.serializers.markFallback, null, children)\n    }\n\n    return h(serializer, props.node, children)\n  }\n\n  // Low-level list serializer\n  function ListSerializer(props) {\n    const tag = props.type === 'bullet' ? 'ul' : 'ol'\n    return h(tag, null, props.children)\n  }\n\n  // Low-level list item serializer\n  function ListItemSerializer(props) {\n    const children =\n      !props.node.style || props.node.style === 'normal' // Don't wrap plain text in paragraphs inside of a list item\n        ? props.children // But wrap any other style in whatever the block serializer says to use\n        : h(props.serializers.types.block, props, props.children)\n    return h('li', null, children)\n  }\n\n  // Renderer of an actual block of type `block`. Confusing, we know.\n  function BlockTypeSerializer(props) {\n    const style = props.node.style || 'normal'\n\n    if (/^h\\d/.test(style)) {\n      return h(style, null, props.children)\n    }\n\n    return style === 'blockquote'\n      ? h('blockquote', null, props.children)\n      : h('p', null, props.children)\n  }\n\n  // Serializers for things that can be directly attributed to a tag without any props\n  // We use partial application to do this, passing the tag name as the first argument\n  function RawMarkSerializer(tag, props) {\n    return h(tag, null, props.children)\n  }\n\n  function UnderlineSerializer(props) {\n    return h(\n      'span',\n      {\n        style: {\n          textDecoration: 'underline'\n        }\n      },\n      props.children\n    )\n  }\n\n  function StrikeThroughSerializer(props) {\n    return h('del', null, props.children)\n  }\n\n  function LinkSerializer(props) {\n    return h(\n      'a',\n      {\n        attrs: {\n          href: props.mark.href\n        }\n      },\n      props.children\n    )\n  }\n\n  function ImageSerializer(props) {\n    const img = h('img', {\n      attrs: {\n        src: getImageUrl(props)\n      }\n    })\n    return props.isInline ? img : h('figure', null, img)\n  }\n\n  // Serializer that recursively calls itself, producing a hyperscript tree of spans\n  function serializeSpan(span, serializers, index, options) {\n    if (span === '\\n' && serializers.hardBreak) {\n      return h(serializers.hardBreak, {\n        key: `hb-${index}`\n      })\n    }\n\n    if (typeof span === 'string') {\n      return serializers.text\n        ? h(\n            serializers.text,\n            {\n              key: `text-${index}`\n            },\n            span\n          )\n        : span\n    }\n\n    let children\n    if (span.children) {\n      children = {\n        children: span.children.map((child, i) =>\n          options.serializeNode(child, i, span.children, true)\n        )\n      }\n    }\n\n    const serializedNode = objectAssign({}, span, children)\n\n    return h(serializers.span, {\n      key: span._key || `span-${index}`,\n      node: serializedNode,\n      serializers\n    })\n  }\n\n  const HardBreakSerializer = () => h('br')\n  const defaultMarkSerializers = {\n    strong: RawMarkSerializer.bind(null, 'strong'),\n    em: RawMarkSerializer.bind(null, 'em'),\n    code: RawMarkSerializer.bind(null, 'code'),\n    underline: UnderlineSerializer,\n    'strike-through': StrikeThroughSerializer,\n    link: LinkSerializer\n  }\n\n  function ContainerSerializer(props) {\n    let properties = null\n    const containerClass = props.className\n    if (containerClass) {\n      properties = {\n        class: containerClass\n      }\n    }\n    return h('div', properties, props.children)\n  }\n\n  const defaultSerializers = {\n    // Common overrides\n    types: {\n      block: BlockTypeSerializer,\n      image: ImageSerializer\n    },\n    marks: defaultMarkSerializers,\n\n    // Less common overrides\n    list: ListSerializer,\n    listItem: ListItemSerializer,\n\n    block: BlockSerializer,\n    span: SpanSerializer,\n    hardBreak: HardBreakSerializer,\n\n    container: ContainerSerializer,\n\n    // When we can't resolve the mark properly, use this renderer as the container\n    markFallback: 'span',\n\n    // Allow overriding text renderer, but leave undefined to just use plain strings by default\n    text: undefined,\n\n    // Empty nodes (React uses null, hyperscript with empty strings)\n    empty: null\n  }\n\n  return {\n    defaultSerializers,\n    serializeSpan\n  }\n}\n"]}